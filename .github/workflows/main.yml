name: Unlock-NetEaseMusic

on:
  schedule:
    - cron: "37 */8 * * *" # Runs every 8 hours
  workflow_dispatch:

jobs:
  get_users:
    runs-on: windows-latest
    environment: Prod
    outputs:
      user_list: ${{ steps.set-users.outputs.user_list }}
    steps:
      - id: set-users
        run: |
          $userList = '${{ vars.USER_LIST }}'
          echo "user_list=$userList" >> $env:GITHUB_OUTPUT
          echo "User list: $userList"
          # Parse and print individual users
          $users = $userList | ConvertFrom-Json
          foreach ($user in $users) {
            echo "User: $user"
          }
        shell: pwsh
        
  unlock_logic:
    runs-on: windows-latest
    strategy: 
      matrix: 
        user: ${{ fromJson(needs.get_users.outputs.user_list) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Chrome & Chromedriver
        run: |
          echo "Installing Google Chrome and Chromedriver..."
          choco install googlechrome -y
          choco install chromedriver -y --force
          echo "✅ Chrome & Chromedriver installed successfully."

      - name: Debug Chrome and Chromedriver
        shell: pwsh # 强制使用 PowerShell
        run: |
          echo "Checking Chrome version..."
          if (Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe") {
              & "C:\Program Files\Google\Chrome\Application\chrome.exe" --version
          } else {
              echo "❌ Chrome not found!"
          }

          echo "Checking Chromedriver version..."
          if (Get-Command chromedriver -ErrorAction SilentlyContinue) {
              chromedriver --version
          } else {
              echo "❌ Chromedriver not found!"
          }

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unlock script for each user
        env:
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          PYTHONIOENCODING: utf-8
          PYTHONLEGACYWINDOWSSTDIO: utf-8
          USER: ${{ matrix.user }}
          COOKIE: ${{ secrets[format('SECRET_{0}', matrix.user)] }}
        run: python auto_login.py
